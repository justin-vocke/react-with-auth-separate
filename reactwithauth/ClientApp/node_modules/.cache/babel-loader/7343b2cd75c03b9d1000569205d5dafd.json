{"ast":null,"code":"import { UserManager, WebStorageStateStore } from 'oidc-client';\nimport { ApplicationPaths, ApplicationName } from './ApiAuthorizationConstants';\nexport class AuthorizeService {\n  constructor() {\n    this._callbacks = [];\n    this._nextSubscriptionId = 0;\n    this._user = null;\n    this._isAuthenticated = false;\n    this._popUpDisabled = true;\n  }\n\n  async isAuthenticated() {\n    const user = await this.getUser();\n    return !!user;\n  }\n\n  async getUser() {\n    if (this._user && this._user.profile) {\n      return this._user.profile;\n    }\n\n    await this.ensureUserManagerInitialized();\n    const user = await this.userManager.getUser();\n    return user && user.profile;\n  }\n\n  async getAccessToken() {\n    await this.ensureUserManagerInitialized();\n    const user = await this.userManager.getUser();\n    return user && user.access_token;\n  } // We try to authenticate the user in three different ways:\n  // 1) We try to see if we can authenticate the user silently. This happens\n  //    when the user is already logged in on the IdP and is done using a hidden iframe\n  //    on the client.\n  // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n  //    Pop-Up blocker or the user has disabled PopUps.\n  // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n  //    redirect flow.\n\n\n  async signIn(state) {\n    await this.ensureUserManagerInitialized();\n\n    try {\n      const silentUser = await this.userManager.signinSilent(this.createArguments());\n      this.updateState(silentUser);\n      return this.success(state);\n    } catch (silentError) {\n      // User might not be authenticated, fallback to popup authentication\n      console.log(\"Silent authentication error: \", silentError);\n\n      try {\n        if (this._popUpDisabled) {\n          throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.');\n        }\n\n        const popUpUser = await this.userManager.signinPopup(this.createArguments());\n        this.updateState(popUpUser);\n        return this.success(state);\n      } catch (popUpError) {\n        if (popUpError.message === \"Popup window closed\") {\n          // The user explicitly cancelled the login action by closing an opened popup.\n          return this.error(\"The user closed the window.\");\n        } else if (!this._popUpDisabled) {\n          console.log(\"Popup authentication error: \", popUpError);\n        } // PopUps might be blocked by the user, fallback to redirect\n\n\n        try {\n          await this.userManager.signinRedirect(this.createArguments(state));\n          return this.redirect();\n        } catch (redirectError) {\n          console.log(\"Redirect authentication error: \", redirectError);\n          return this.error(redirectError);\n        }\n      }\n    }\n  }\n\n  async completeSignIn(url) {\n    try {\n      await this.ensureUserManagerInitialized();\n      const user = await this.userManager.signinCallback(url);\n      this.updateState(user);\n      return this.success(user && user.state);\n    } catch (error) {\n      console.log('There was an error signing in: ', error);\n      return this.error('There was an error signing in.');\n    }\n  } // We try to sign out the user in two different ways:\n  // 1) We try to do a sign-out using a PopUp Window. This might fail if there is a\n  //    Pop-Up blocker or the user has disabled PopUps.\n  // 2) If the method above fails, we redirect the browser to the IdP to perform a traditional\n  //    post logout redirect flow.\n\n\n  async signOut(state) {\n    await this.ensureUserManagerInitialized();\n\n    try {\n      if (this._popUpDisabled) {\n        throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.');\n      }\n\n      await this.userManager.signoutPopup(this.createArguments());\n      this.updateState(undefined);\n      return this.success(state);\n    } catch (popupSignOutError) {\n      console.log(\"Popup signout error: \", popupSignOutError);\n\n      try {\n        await this.userManager.signoutRedirect(this.createArguments(state));\n        return this.redirect();\n      } catch (redirectSignOutError) {\n        console.log(\"Redirect signout error: \", redirectSignOutError);\n        return this.error(redirectSignOutError);\n      }\n    }\n  }\n\n  async completeSignOut(url) {\n    await this.ensureUserManagerInitialized();\n\n    try {\n      const response = await this.userManager.signoutCallback(url);\n      this.updateState(null);\n      return this.success(response && response.data);\n    } catch (error) {\n      console.log(`There was an error trying to log out '${error}'.`);\n      return this.error(error);\n    }\n  }\n\n  updateState(user) {\n    this._user = user;\n    this._isAuthenticated = !!this._user;\n    this.notifySubscribers();\n  }\n\n  subscribe(callback) {\n    this._callbacks.push({\n      callback,\n      subscription: this._nextSubscriptionId++\n    });\n\n    return this._nextSubscriptionId - 1;\n  }\n\n  unsubscribe(subscriptionId) {\n    const subscriptionIndex = this._callbacks.map((element, index) => element.subscription === subscriptionId ? {\n      found: true,\n      index\n    } : {\n      found: false\n    }).filter(element => element.found === true);\n\n    if (subscriptionIndex.length !== 1) {\n      throw new Error(`Found an invalid number of subscriptions ${subscriptionIndex.length}`);\n    }\n\n    this._callbacks.splice(subscriptionIndex[0].index, 1);\n  }\n\n  notifySubscribers() {\n    for (let i = 0; i < this._callbacks.length; i++) {\n      const callback = this._callbacks[i].callback;\n      callback();\n    }\n  }\n\n  createArguments(state) {\n    return {\n      useReplaceToNavigate: true,\n      data: state\n    };\n  }\n\n  error(message) {\n    return {\n      status: AuthenticationResultStatus.Fail,\n      message\n    };\n  }\n\n  success(state) {\n    return {\n      status: AuthenticationResultStatus.Success,\n      state\n    };\n  }\n\n  redirect() {\n    return {\n      status: AuthenticationResultStatus.Redirect\n    };\n  }\n\n  async ensureUserManagerInitialized() {\n    if (this.userManager !== undefined) {\n      return;\n    }\n\n    let response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n\n    if (!response.ok) {\n      throw new Error(`Could not load settings for '${ApplicationName}'`);\n    }\n\n    let settings = await response.json();\n    settings.automaticSilentRenew = true;\n    settings.includeIdTokenInSilentRenew = true;\n    settings.userStore = new WebStorageStateStore({\n      prefix: ApplicationName\n    });\n    this.userManager = new UserManager(settings);\n    this.userManager.events.addUserSignedOut(async () => {\n      await this.userManager.removeUser();\n      this.updateState(undefined);\n    });\n  }\n\n  static get instance() {\n    return authService;\n  }\n\n}\nconst authService = new AuthorizeService();\nexport default authService;\nexport const AuthenticationResultStatus = {\n  Redirect: 'redirect',\n  Success: 'success',\n  Fail: 'fail'\n};","map":{"version":3,"names":["UserManager","WebStorageStateStore","ApplicationPaths","ApplicationName","AuthorizeService","_callbacks","_nextSubscriptionId","_user","_isAuthenticated","_popUpDisabled","isAuthenticated","user","getUser","profile","ensureUserManagerInitialized","userManager","getAccessToken","access_token","signIn","state","silentUser","signinSilent","createArguments","updateState","success","silentError","console","log","Error","popUpUser","signinPopup","popUpError","message","error","signinRedirect","redirect","redirectError","completeSignIn","url","signinCallback","signOut","signoutPopup","undefined","popupSignOutError","signoutRedirect","redirectSignOutError","completeSignOut","response","signoutCallback","data","notifySubscribers","subscribe","callback","push","subscription","unsubscribe","subscriptionId","subscriptionIndex","map","element","index","found","filter","length","splice","i","useReplaceToNavigate","status","AuthenticationResultStatus","Fail","Success","Redirect","fetch","ApiAuthorizationClientConfigurationUrl","ok","settings","json","automaticSilentRenew","includeIdTokenInSilentRenew","userStore","prefix","events","addUserSignedOut","removeUser","instance","authService"],"sources":["C:/Users/Justin Vocke/source/repos/reactwithauth/reactwithauth/clientapp/src/components/api-authorization/AuthorizeService.js"],"sourcesContent":["import { UserManager, WebStorageStateStore } from 'oidc-client';\r\nimport { ApplicationPaths, ApplicationName } from './ApiAuthorizationConstants';\r\n\r\nexport class AuthorizeService {\r\n    _callbacks = [];\r\n    _nextSubscriptionId = 0;\r\n    _user = null;\r\n    _isAuthenticated = false;\r\n\r\n    // By default pop ups are disabled because they don't work properly on Edge.\r\n    // If you want to enable pop up authentication simply set this flag to false.\r\n    _popUpDisabled = true;\r\n\r\n    async isAuthenticated() {\r\n        const user = await this.getUser();\r\n        return !!user;\r\n    }\r\n\r\n    async getUser() {\r\n        if (this._user && this._user.profile) {\r\n            return this._user.profile;\r\n        }\r\n\r\n        await this.ensureUserManagerInitialized();\r\n        const user = await this.userManager.getUser();\r\n        return user && user.profile;\r\n    }\r\n\r\n    async getAccessToken() {\r\n        await this.ensureUserManagerInitialized();\r\n        const user = await this.userManager.getUser();\r\n        return user && user.access_token;\r\n    }\r\n\r\n    // We try to authenticate the user in three different ways:\r\n    // 1) We try to see if we can authenticate the user silently. This happens\r\n    //    when the user is already logged in on the IdP and is done using a hidden iframe\r\n    //    on the client.\r\n    // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\r\n    //    Pop-Up blocker or the user has disabled PopUps.\r\n    // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\r\n    //    redirect flow.\r\n    async signIn(state) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            const silentUser = await this.userManager.signinSilent(this.createArguments());\r\n            this.updateState(silentUser);\r\n            return this.success(state);\r\n        } catch (silentError) {\r\n            // User might not be authenticated, fallback to popup authentication\r\n            console.log(\"Silent authentication error: \", silentError);\r\n\r\n            try {\r\n                if (this._popUpDisabled) {\r\n                    throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\r\n                }\r\n\r\n                const popUpUser = await this.userManager.signinPopup(this.createArguments());\r\n                this.updateState(popUpUser);\r\n                return this.success(state);\r\n            } catch (popUpError) {\r\n                if (popUpError.message === \"Popup window closed\") {\r\n                    // The user explicitly cancelled the login action by closing an opened popup.\r\n                    return this.error(\"The user closed the window.\");\r\n                } else if (!this._popUpDisabled) {\r\n                    console.log(\"Popup authentication error: \", popUpError);\r\n                }\r\n\r\n                // PopUps might be blocked by the user, fallback to redirect\r\n                try {\r\n                    await this.userManager.signinRedirect(this.createArguments(state));\r\n                    return this.redirect();\r\n                } catch (redirectError) {\r\n                    console.log(\"Redirect authentication error: \", redirectError);\r\n                    return this.error(redirectError);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async completeSignIn(url) {\r\n        try {\r\n            await this.ensureUserManagerInitialized();\r\n            const user = await this.userManager.signinCallback(url);\r\n            this.updateState(user);\r\n            return this.success(user && user.state);\r\n        } catch (error) {\r\n            console.log('There was an error signing in: ', error);\r\n            return this.error('There was an error signing in.');\r\n        }\r\n    }\r\n\r\n    // We try to sign out the user in two different ways:\r\n    // 1) We try to do a sign-out using a PopUp Window. This might fail if there is a\r\n    //    Pop-Up blocker or the user has disabled PopUps.\r\n    // 2) If the method above fails, we redirect the browser to the IdP to perform a traditional\r\n    //    post logout redirect flow.\r\n    async signOut(state) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            if (this._popUpDisabled) {\r\n                throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\r\n            }\r\n\r\n            await this.userManager.signoutPopup(this.createArguments());\r\n            this.updateState(undefined);\r\n            return this.success(state);\r\n        } catch (popupSignOutError) {\r\n            console.log(\"Popup signout error: \", popupSignOutError);\r\n            try {\r\n                await this.userManager.signoutRedirect(this.createArguments(state));\r\n                return this.redirect();\r\n            } catch (redirectSignOutError) {\r\n                console.log(\"Redirect signout error: \", redirectSignOutError);\r\n                return this.error(redirectSignOutError);\r\n            }\r\n        }\r\n    }\r\n\r\n    async completeSignOut(url) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            const response = await this.userManager.signoutCallback(url);\r\n            this.updateState(null);\r\n            return this.success(response && response.data);\r\n        } catch (error) {\r\n            console.log(`There was an error trying to log out '${error}'.`);\r\n            return this.error(error);\r\n        }\r\n    }\r\n\r\n    updateState(user) {\r\n        this._user = user;\r\n        this._isAuthenticated = !!this._user;\r\n        this.notifySubscribers();\r\n    }\r\n\r\n    subscribe(callback) {\r\n        this._callbacks.push({ callback, subscription: this._nextSubscriptionId++ });\r\n        return this._nextSubscriptionId - 1;\r\n    }\r\n\r\n    unsubscribe(subscriptionId) {\r\n        const subscriptionIndex = this._callbacks\r\n            .map((element, index) => element.subscription === subscriptionId ? { found: true, index } : { found: false })\r\n            .filter(element => element.found === true);\r\n        if (subscriptionIndex.length !== 1) {\r\n            throw new Error(`Found an invalid number of subscriptions ${subscriptionIndex.length}`);\r\n        }\r\n\r\n        this._callbacks.splice(subscriptionIndex[0].index, 1);\r\n    }\r\n\r\n    notifySubscribers() {\r\n        for (let i = 0; i < this._callbacks.length; i++) {\r\n            const callback = this._callbacks[i].callback;\r\n            callback();\r\n        }\r\n    }\r\n\r\n    createArguments(state) {\r\n        return { useReplaceToNavigate: true, data: state };\r\n    }\r\n\r\n    error(message) {\r\n        return { status: AuthenticationResultStatus.Fail, message };\r\n    }\r\n\r\n    success(state) {\r\n        return { status: AuthenticationResultStatus.Success, state };\r\n    }\r\n\r\n    redirect() {\r\n        return { status: AuthenticationResultStatus.Redirect };\r\n    }\r\n\r\n    async ensureUserManagerInitialized() {\r\n        if (this.userManager !== undefined) {\r\n            return;\r\n        }\r\n\r\n        let response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\r\n        if (!response.ok) {\r\n            throw new Error(`Could not load settings for '${ApplicationName}'`);\r\n        }\r\n\r\n        let settings = await response.json();\r\n        settings.automaticSilentRenew = true;\r\n        settings.includeIdTokenInSilentRenew = true;\r\n        settings.userStore = new WebStorageStateStore({\r\n            prefix: ApplicationName\r\n        });\r\n\r\n        this.userManager = new UserManager(settings);\r\n\r\n        this.userManager.events.addUserSignedOut(async () => {\r\n            await this.userManager.removeUser();\r\n            this.updateState(undefined);\r\n        });\r\n    }\r\n\r\n    static get instance() { return authService }\r\n}\r\n\r\nconst authService = new AuthorizeService();\r\n\r\nexport default authService;\r\n\r\nexport const AuthenticationResultStatus = {\r\n    Redirect: 'redirect',\r\n    Success: 'success',\r\n    Fail: 'fail'\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}