{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Justin Vocke\\\\source\\\\repos\\\\reactwithauth\\\\reactwithauth\\\\clientapp\\\\src\\\\components\\\\api-authorization\\\\Logout.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants'; // The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Logout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: undefined,\n      isReady: false,\n      authenticated: false\n    };\n  }\n\n  componentDidMount() {\n    const action = this.props.action;\n\n    switch (action) {\n      case LogoutActions.Logout:\n        if (!!window.history.state.state.local) {\n          this.logout(this.getReturnUrl());\n        } else {\n          // This prevents regular links to <app>/authentication/logout from triggering a logout\n          this.setState({\n            isReady: true,\n            message: \"The logout was not initiated from within the page.\"\n          });\n        }\n\n        break;\n\n      case LogoutActions.LogoutCallback:\n        this.processLogoutCallback();\n        break;\n\n      case LogoutActions.LoggedOut:\n        this.setState({\n          isReady: true,\n          message: \"You successfully logged out!\"\n        });\n        break;\n\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n\n    this.populateAuthenticationState();\n  }\n\n  render() {\n    const {\n      isReady,\n      message\n    } = this.state;\n\n    if (!isReady) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (!!message) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this);\n    } else {\n      const action = this.props.action;\n\n      switch (action) {\n        case LogoutActions.Logout:\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Processing logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this);\n\n        case LogoutActions.LogoutCallback:\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Processing logout callback\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this);\n\n        case LogoutActions.LoggedOut:\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this);\n\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    }\n  }\n\n  async logout(returnUrl) {\n    const state = {\n      returnUrl\n    };\n    const isauthenticated = await authService.isAuthenticated();\n\n    if (isauthenticated) {\n      const result = await authService.signOut(state);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n\n        case AuthenticationResultStatus.Success:\n          await this.navigateToReturnUrl(returnUrl);\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          this.setState({\n            message: result.message\n          });\n          break;\n\n        default:\n          throw new Error(\"Invalid authentication result status.\");\n      }\n    } else {\n      this.setState({\n        message: \"You successfully logged out!\"\n      });\n    }\n  }\n\n  async processLogoutCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignOut(url);\n\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        // There should not be any redirects as the only time completeAuthentication finishes\n        // is when we are doing a redirect sign in flow.\n        throw new Error('Should not redirect.');\n\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n\n      default:\n        throw new Error(\"Invalid authentication result status.\");\n    }\n  }\n\n  async populateAuthenticationState() {\n    const authenticated = await authService.isAuthenticated();\n    this.setState({\n      isReady: true,\n      authenticated\n    });\n  }\n\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n\n    if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      // This is an extra check to prevent open redirects.\n      throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\");\n    }\n\n    return state && state.returnUrl || fromQuery || `${window.location.origin}${ApplicationPaths.LoggedOut}`;\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    return window.location.replace(returnUrl);\n  }\n\n}","map":{"version":3,"names":["React","Component","authService","AuthenticationResultStatus","QueryParameterNames","LogoutActions","ApplicationPaths","Logout","constructor","props","state","message","undefined","isReady","authenticated","componentDidMount","action","window","history","local","logout","getReturnUrl","setState","LogoutCallback","processLogoutCallback","LoggedOut","Error","populateAuthenticationState","render","returnUrl","isauthenticated","isAuthenticated","result","signOut","status","Redirect","Success","navigateToReturnUrl","Fail","url","location","href","completeSignOut","params","URLSearchParams","search","fromQuery","get","ReturnUrl","startsWith","origin","replace"],"sources":["C:/Users/Justin Vocke/source/repos/reactwithauth/reactwithauth/clientapp/src/components/api-authorization/Logout.js"],"sourcesContent":["import React from 'react'\r\nimport { Component } from 'react';\r\nimport authService from './AuthorizeService';\r\nimport { AuthenticationResultStatus } from './AuthorizeService';\r\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants';\r\n\r\n// The main responsibility of this component is to handle the user's logout process.\r\n// This is the starting point for the logout process, which is usually initiated when a\r\n// user clicks on the logout button on the LoginMenu component.\r\nexport class Logout extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: undefined,\r\n            isReady: false,\r\n            authenticated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const action = this.props.action;\r\n        switch (action) {\r\n            case LogoutActions.Logout:\r\n                if (!!window.history.state.state.local) {\r\n                    this.logout(this.getReturnUrl());\r\n                } else {\r\n                    // This prevents regular links to <app>/authentication/logout from triggering a logout\r\n                    this.setState({ isReady: true, message: \"The logout was not initiated from within the page.\" });\r\n                }\r\n                break;\r\n            case LogoutActions.LogoutCallback:\r\n                this.processLogoutCallback();\r\n                break;\r\n            case LogoutActions.LoggedOut:\r\n                this.setState({ isReady: true, message: \"You successfully logged out!\" });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid action '${action}'`);\r\n        }\r\n\r\n        this.populateAuthenticationState();\r\n    }\r\n\r\n    render() {\r\n        const { isReady, message } = this.state;\r\n        if (!isReady) {\r\n            return <div></div>\r\n        }\r\n        if (!!message) {\r\n            return (<div>{message}</div>);\r\n        } else {\r\n            const action = this.props.action;\r\n            switch (action) {\r\n                case LogoutActions.Logout:\r\n                    return (<div>Processing logout</div>);\r\n                case LogoutActions.LogoutCallback:\r\n                    return (<div>Processing logout callback</div>);\r\n                case LogoutActions.LoggedOut:\r\n                    return (<div>{message}</div>);\r\n                default:\r\n                    throw new Error(`Invalid action '${action}'`);\r\n            }\r\n        }\r\n    }\r\n\r\n    async logout(returnUrl) {\r\n        const state = { returnUrl };\r\n        const isauthenticated = await authService.isAuthenticated();\r\n        if (isauthenticated) {\r\n            const result = await authService.signOut(state);\r\n            switch (result.status) {\r\n                case AuthenticationResultStatus.Redirect:\r\n                    break;\r\n                case AuthenticationResultStatus.Success:\r\n                    await this.navigateToReturnUrl(returnUrl);\r\n                    break;\r\n                case AuthenticationResultStatus.Fail:\r\n                    this.setState({ message: result.message });\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Invalid authentication result status.\");\r\n            }\r\n        } else {\r\n            this.setState({ message: \"You successfully logged out!\" });\r\n        }\r\n    }\r\n\r\n    async processLogoutCallback() {\r\n        const url = window.location.href;\r\n        const result = await authService.completeSignOut(url);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                // There should not be any redirects as the only time completeAuthentication finishes\r\n                // is when we are doing a redirect sign in flow.\r\n                throw new Error('Should not redirect.');\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.setState({ message: result.message });\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid authentication result status.\");\r\n        }\r\n    }\r\n\r\n    async populateAuthenticationState() {\r\n        const authenticated = await authService.isAuthenticated();\r\n        this.setState({ isReady: true, authenticated });\r\n    }\r\n\r\n    getReturnUrl(state) {\r\n        const params = new URLSearchParams(window.location.search);\r\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\r\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\r\n            // This is an extra check to prevent open redirects.\r\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\r\n        }\r\n        return (state && state.returnUrl) ||\r\n            fromQuery ||\r\n            `${window.location.origin}${ApplicationPaths.LoggedOut}`;\r\n    }\r\n\r\n    navigateToReturnUrl(returnUrl) {\r\n        return window.location.replace(returnUrl);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}